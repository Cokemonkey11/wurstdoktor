---
- Package:
    doc: "This package provides a light-weight damage detection system with priority-ordered listeners. \n\n    **IMPORTANT** \n        This package **doesn't** provide protection from cyclic damage.\n        Damage from code **must** be declared by the user using DamageEvent.setNextDamageFromCode() before dealing damage.\n        If you set damage amount to zero or less in the unreduced listeners, reduced listeners will not fire.\n\n        if DETECT_NATIVE_ABILITIES is true:\n            > Any damage instance of attacktype ATTACK_TYPE_NORMAL is passed with DamageType SPELL\n\n\n    To listen to any damage instance firing:\n\n       DamageEvent.addListener() -> \n            print(DamageEvent.getSource().getName()+\" dealt \"+DamageEvent.getAmount().toString()+\" damage to \"+DamageEvent.getTarget().getName()+\".\")\n\n    If the order of firing of the listeners is important, the user can give a priority to the listener:\n\n        DamageEvent.addListener(2) -> \n            print(\"This fires after.\")\n        DamageEvent.addListener(0) -> \n            print(\"This fires before.\")\n\n    If you want to catch the damage instance before it has been reduced by any damage reducing effect (such as armor) you can use the unreduced verions of the listeners:\n\n        DamageEvent.addUnreducedListener() -> \n            print(\"this fire before any damage reduction\")\n\n\n    Each damage instance has a DamageType associated to it.\n    CODE **must** be declared by the user using DamageEvent.setNextDamageFromCode() before dealing damage.\n    ATTACK and SPELL are detected by the system (if DETECT_NATIVE_ABILITIES is false then native abilities will be detected as ATTACK)\n\n        DamageEvent.addListener() -> \n            switch DamageEvent.getType() \n                case ATTACK \n                    print(\"This damage is from a unit's attack.\")\n                case SPELL\n                    print(\"This damage is from a native ability.\")\n                case CODE \n                    print(\"This damage is from code.\")\n                default\n\n    Each damage instance can have an id and/or an element.DamageEvent\n    Allowing the user to easily categorize (DamageElement) or/and identify a damage instance (id):\n\n        DamageEvent.setNextDamageFromCode()\n        DamageEvent.setNextDamageId('A000') // This damage instance is from the spell 'A000'\n        DamageEvent.setNextDamageElement(DAMAGE_ELEMENT_FIRE) // This damage instance will be categorized as a Fire damage instance.\n        UnitDamageTarget(source, target, amount, [...])\n\n    Using globally defined priorities for a map can help easily understand and use a damage pipeline:\n\n        public constant DAMAGE_EVENT_PRIO_START     = 0 // Abort damage at this priority\n        public constant DAMAGE_EVENT_PRIO_RELATIVE  = 1 // Apply relative changes (multiplication and division)\n        public constant DAMAGE_EVENT_PRIO_ABSOLUTE  = 2 // Apply absolute changes (addition and subtraction)\n        public constant DAMAGE_EVENT_PRIO_SHIELD    = 4 // Apply reduction from \"shield\" effects  \n        public constant DAMAGE_EVENT_PRIO_FINAL     = 5 // Final damage (won't be changed at this stage)"
    name: DamageEvent
    classes: []
    enums: []
    free_fns:
      - doc: ~
        static_: false
        extensor: ~
        name: getDamageTypeName
        params:
          - typ: DamageType
            name: t
        returns: string
      - doc: ~
        static_: false
        extensor: ~
        name: getDamageDesignation
        params:
          - typ: DamageType
            name: t
          - typ: DamageElement
            name: e
        returns: string
