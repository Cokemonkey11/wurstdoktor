---
- Package:
    doc: ~
    name: Bitwise
    classes: []
    enums: []
    free_fns:
      - doc: "Selects the n-th byte from these bytes, starting from\n\t0 for the least significant byte and ending with\n\t3 for the most significant byte."
        static_: false
        extensor: byte4
        name: select
        params:
          - typ: int
            name: pos
        returns: int
      - doc: Replaces the byte in the n-th position with the provided one.
        static_: false
        extensor: byte4
        name: put
        params:
          - typ: int
            name: pos
          - typ: int
            name: value
        returns: byte4
      - doc: Re-assembles these bytes into an integer.
        static_: false
        extensor: byte4
        name: toInt
        params: []
        returns: int
      - doc: "Turns this signed integer into an unsigned one if it is negative,\n\tremoving the first (sign) bit"
        static_: false
        extensor: int
        name: toUnsigned
        params: []
        returns: int
      - doc: ~
        static_: false
        extensor: int
        name: byte1
        params: []
        returns: int
      - doc: ~
        static_: false
        extensor: int
        name: byte2
        params: []
        returns: int
      - doc: ~
        static_: false
        extensor: int
        name: byte3
        params: []
        returns: int
      - doc: ~
        static_: false
        extensor: int
        name: byte4
        params:
          - typ: int
            name: isNegative
        returns: int
      - doc: De-composes an integer into 4 unsigned bytes.
        static_: false
        extensor: int
        name: bytes
        params: []
        returns: byte4
      - doc: "Produces a signed integer from the bitstring.\n\tInput string may contain whitespace for padding."
        static_: false
        extensor: string
        name: fromBitString
        params: []
        returns: int
      - doc: Produces a bistring from this integer.
        static_: false
        extensor: int
        name: toBitString
        params: []
        returns: string
      - doc: "8-bit NOT (~)\n\tNOTE: Assumes number is in the range [0, 255]\n\n\tnumber.not8() equivalent to (~number)"
        static_: false
        extensor: int
        name: not8
        params: []
        returns: int
      - doc: "32-bit NOT (~)\n\n\tnumber.not32() equivalent to (~number)"
        static_: false
        extensor: int
        name: not32
        params: []
        returns: int
      - doc: "8-bit AND (&)\n\tNOTE: Assumes both operands are in the range [0, 255]\n\n\tnumber.and8(other) equivalent to (number & other)"
        static_: false
        extensor: int
        name: and8
        params:
          - typ: int
            name: other
        returns: int
      - doc: "32-bit AND (&)\n\n\tnumber.and32(other) equivalent to (number & other)"
        static_: false
        extensor: int
        name: and32
        params:
          - typ: int
            name: other
        returns: int
      - doc: "8-bit OR (|)\n\tNOTE: Assumes both operands are in the range [0, 255]\n\n\tnumber.or8(other) equivalent to (number | other)"
        static_: false
        extensor: int
        name: or8
        params:
          - typ: int
            name: other
        returns: int
      - doc: "32-bit OR (|)\n\n\tnumber.or32(other) equivalent to (number | other)"
        static_: false
        extensor: int
        name: or32
        params:
          - typ: int
            name: other
        returns: int
      - doc: "8-bit XOR (^)\n\tNOTE: Assumes both operands are in the range [0, 255]\n\n\tnumber.xor8(other) equivalent to (number ^ other)"
        static_: false
        extensor: int
        name: xor8
        params:
          - typ: int
            name: other
        returns: int
      - doc: "32-bit XOR (^)\n\n\tnumber.xor32(other) equivalent to (number ^ other)"
        static_: false
        extensor: int
        name: xor32
        params:
          - typ: int
            name: other
        returns: int
      - doc: "32-bit SHIFTL (<<)\n\n\tnumber.shiftl(amount) equivalent to (number << amount)"
        static_: false
        extensor: int
        name: shiftl
        params:
          - typ: int
            name: amount
        returns: int
      - doc: "32-bit SHIFTR (>>)\n\n\tnumber.shiftr(amount) equivalent to (number >> amount)"
        static_: false
        extensor: int
        name: shiftr
        params:
          - typ: int
            name: amount
        returns: int
