---
- Package:
    doc: ~
    name: Quaternion
    classes: []
    enums: []
    free_fns:
      - doc: ~
        static_: false
        extensor: quat
        name: op_plus
        params:
          - typ: quat
            name: q
        returns: quat
      - doc: ~
        static_: false
        extensor: quat
        name: op_plus
        params:
          - typ: real
            name: scalar
        returns: quat
      - doc: ~
        static_: false
        extensor: real
        name: op_plus
        params:
          - typ: quat
            name: q
        returns: quat
      - doc: ~
        static_: false
        extensor: quat
        name: op_minus
        params:
          - typ: quat
            name: q
        returns: quat
      - doc: ~
        static_: false
        extensor: quat
        name: op_minus
        params:
          - typ: real
            name: scalar
        returns: quat
      - doc: ~
        static_: false
        extensor: quat
        name: op_mult
        params:
          - typ: real
            name: scalar
        returns: quat
      - doc: ~
        static_: false
        extensor: real
        name: op_mult
        params:
          - typ: quat
            name: q
        returns: quat
      - doc: ~
        static_: false
        extensor: quat
        name: dot
        params:
          - typ: quat
            name: q
        returns: real
      - doc: Represents the composition of two rotations.
        static_: false
        extensor: quat
        name: cross
        params:
          - typ: quat
            name: q
        returns: quat
      - doc: Represents the same rotation in opposite direction.
        static_: false
        extensor: quat
        name: conj
        params: []
        returns: quat
      - doc: ~
        static_: false
        extensor: quat
        name: length
        params: []
        returns: real
      - doc: Returns zero quaternion if lenght is zero.
        static_: false
        extensor: quat
        name: norm
        params: []
        returns: quat
      - doc: Quaternion to power of alpha.
        static_: false
        extensor: quat
        name: exp
        params:
          - typ: real
            name: alpha
        returns: quat
      - doc: ~
        static_: false
        extensor: quat
        name: toMatrix
        params: []
        returns: mat3
      - doc: Extracts X-axis from a quaternion that represents rotation.
        static_: false
        extensor: quat
        name: getX
        params: []
        returns: vec3
      - doc: Extracts Y-axis as a vector from a quaternion that represents rotation.
        static_: false
        extensor: quat
        name: getY
        params: []
        returns: vec3
      - doc: Extracts Z-axis as a vector from a quaternion that represents rotation.
        static_: false
        extensor: quat
        name: getZ
        params: []
        returns: vec3
      - doc: "Linear interpolation.\nq - targeted quaternion. p - progress from 0 to 1."
        static_: false
        extensor: quat
        name: lerp
        params:
          - typ: quat
            name: q
          - typ: real
            name: p
        returns: quat
      - doc: "Linear interpolation.\nAlways chooses the SHORTEST way between rotations.\nq - targeted quaternion. p - progress from 0 to 1."
        static_: false
        extensor: quat
        name: lerpShort
        params:
          - typ: quat
            name: q
          - typ: real
            name: p
        returns: quat
      - doc: "Linear interpolation.\nAlways chooses the LONGEST way between rotations.\nq - targeted quaternion. p - progress from 0 to 1."
        static_: false
        extensor: quat
        name: lerpLong
        params:
          - typ: quat
            name: q
          - typ: real
            name: p
        returns: quat
      - doc: "Normalized linear interpolation.\nq - targeted quaternion. p - progress from 0 to 1."
        static_: false
        extensor: quat
        name: nlerp
        params:
          - typ: quat
            name: q
          - typ: real
            name: p
        returns: quat
      - doc: "Normalized linear interpolation.\nAlways chooses the SHORTEST way between rotations.\nq - targeted quaternion. p - progress from 0 to 1."
        static_: false
        extensor: quat
        name: nlerpShort
        params:
          - typ: quat
            name: q
          - typ: real
            name: p
        returns: quat
      - doc: "Normalized linear interpolation.\nAlways chooses the LONGEST way between rotations.\nq - targeted quaternion. p - progress from 0 to 1."
        static_: false
        extensor: quat
        name: nlerpLong
        params:
          - typ: quat
            name: q
          - typ: real
            name: p
        returns: quat
      - doc: "Spherical linear interpolation. Interpolates between two rotations.\nq - targeted quaternion. p - progress from 0 to 1.\nSlerp is the least efficient approach in performance so try to avoid using it, unless you need constant angular velocity. Nlerp is better solution in most cases."
        static_: false
        extensor: quat
        name: slerp
        params:
          - typ: quat
            name: q
          - typ: real
            name: p
        returns: quat
      - doc: "Spherical linear interpolation. Interpolates between two rotations.\nAlways chooses the SHORTEST way between rotations.\nq - targeted quaternion. p - progress from 0 to 1.\nSlerp is the least efficient approach in performance so try to avoid using it, unless you need constant angular velocity. Nlerp is better solution in most cases."
        static_: false
        extensor: quat
        name: slerpShort
        params:
          - typ: quat
            name: q
          - typ: real
            name: p
        returns: quat
      - doc: "Spherical linear interpolation. Interpolates between two rotations.\nAlways chooses the LONGEST way between rotations.\nq - targeted quaternion. p - progress from 0 to 1.\nSlerp is the least efficient approach in performance so try to avoid using it, unless you need constant angular velocity. Nlerp is better solution in most cases."
        static_: false
        extensor: quat
        name: slerpLong
        params:
          - typ: quat
            name: q
          - typ: real
            name: p
        returns: quat
      - doc: ~
        static_: false
        extensor: quat
        name: toString
        params: []
        returns: string
      - doc: "Gimbal lock detection.\nReturns 1 for north, -1 for south, 0 if no gimbal lock."
        static_: false
        extensor: quat
        name: getGimbalPole
        params: []
        returns: int
      - doc: Extracts Euler-angles (Tait-Bryan) in radians from a quaternion. Order of the result is X-Y-Z.
        static_: false
        extensor: quat
        name: toEuler
        params: []
        returns: vec3
      - doc: Creates a quaternion from rotation axis and angle.
        static_: false
        extensor: vec3
        name: toQuat
        params:
          - typ: angle
            name: angl
        returns: quat
      - doc: Creates a quaternion from rotation axis and angle.
        static_: false
        extensor: angle
        name: toQuat
        params:
          - typ: vec3
            name: axis
        returns: quat
      - doc: Rotates a vector by a quaternion.
        static_: false
        extensor: vec3
        name: rotate
        params:
          - typ: quat
            name: q
        returns: vec3
      - doc: Extracts quaternion from a rotation matrix.
        static_: false
        extensor: mat3
        name: toQuat
        params: []
        returns: quat
      - doc: ~
        static_: false
        extensor: quat
        name: assertEquals
        params:
          - typ: quat
            name: expected
        returns: ~
    interfaces: []
